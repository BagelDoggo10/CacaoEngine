# Create definitions
includes = -Iinclude -I../cacao/include -I../libs/spdlog/include -I../libs/glm -I../libs/uuid_v4 -I../libs/bsthreadpool -I../libs -I../libs/glad/include -I../libs/glfw/include -I../libs/imgui -I../libs/stb -I../libs/spirv-cross -I../libs/assimp/include -I../libs/generated
defines = -DGLFW_INCLUDE_NONE
libs = -L../libs/generated -lglad_gl -lglfw -lstb_image -limgui_gl_glfw -lspirv-cross-c -lspirv-cross-core -lspirv-cross-cpp -lspirv-cross-glsl -lspirv-cross-reflect -lspirv-cross-util -lspirv-cross-hlsl -lspirv-cross-msl
opts = -std=c++20 -fPIC -g

cflags = $includes $defines $opts -c
lflags = $includes $defines $opts $libs -shared -fuse-ld=lld

objdir = ./build/obj

# Set Ninja build directory
builddir = ./build

# Create rules
rule compile
    command = clang++ -c $in $cflags -o $out
    description = Compile C++: $in -> $out

rule link
    command = clang++ $in $lflags -o $out
    description = Link Shared Library: $out

# Compile objects
build $objdir/Mesh.o: compile src/Mesh.cpp
build $objdir/Shader.o: compile src/Shader.cpp
build $objdir/Window.o: compile src/Window.cpp
build $objdir/GPU.o: compile src/GPU.cpp
build $objdir/Cubemap.o: compile src/Cubemap.cpp
build $objdir/Texture2D.o: compile src/Texture2D.cpp
build $objdir/Skybox.o: compile src/Skybox.cpp
build $objdir/Renderer.o: compile src/Renderer.cpp

# Link library
build ./build/libcacaobackend.so: link $objdir/Mesh.o $objdir/Shader.o $objdir/Window.o $objdir/Cubemap.o $objdir/Texture2D.o $objdir/Skybox.o $objdir/Renderer.o $objdir/GPU.o || $objdir/Mesh.o $objdir/Shader.o $objdir/Window.o $objdir/Cubemap.o $objdir/Texture2D.o $objdir/Skybox.o $objdir/Renderer.o $objdir/GPU.o
