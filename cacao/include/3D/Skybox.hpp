#pragma once

#include "Graphics/Shader.hpp"
#include "Graphics/Textures/Cubemap.hpp"
#include "Mesh.hpp"

#include "glm/vec2.hpp"
#include "glm/mat4x4.hpp"

#include <array>
#include <future>

namespace Cacao {
	//Must be implemented per-rendering API
	class Skybox : public Asset {
	  public:
		//Warning: deletes cubemap provided when deleted if not copy-constructed
		Skybox(Cubemap* tex);
		~Skybox() {
			if(textureOwner) delete texture;
		}
		Skybox(const Skybox& other)
		  : Asset(other.compiled), rotation(other.rotation), textureOwner(false), texture(other.texture) {
			_InitCopyND();
		}

		//Utility compile and release functions which are forwarded to the texture
		std::shared_future<void> Compile() override {
			return texture->Compile();
		}
		void Release() override {
			texture->Release();
		}
		bool IsCompiled() override {
			return texture->IsCompiled();
		}

		std::string GetType() override {
			return "SKYBOX";
		}

		//Draw this skybox
		void Draw(glm::mat4 projectionMatrix, glm::mat4 viewMatrix);

		//Set up any common skybox resources
		static void CommonSetup();
		//Clean up any common skybox resources
		static void CommonCleanup();

		glm::vec3 rotation;

	  private:
		bool textureOwner;
		Cubemap* texture;

		//Initialize native data on copy
		void _InitCopyND();

		static Shader* skyboxShader;
		static constexpr float skyboxVerts[] = {
			-1.0f, 1.0f, -1.0f,
			-1.0f, -1.0f, -1.0f,
			1.0f, -1.0f, -1.0f,
			1.0f, -1.0f, -1.0f,
			1.0f, 1.0f, -1.0f,
			-1.0f, 1.0f, -1.0f,
			-1.0f, -1.0f, 1.0f,
			-1.0f, -1.0f, -1.0f,
			-1.0f, 1.0f, -1.0f,
			-1.0f, 1.0f, -1.0f,
			-1.0f, 1.0f, 1.0f,
			-1.0f, -1.0f, 1.0f,
			1.0f, -1.0f, -1.0f,
			1.0f, -1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, -1.0f,
			1.0f, -1.0f, -1.0f,
			-1.0f, -1.0f, 1.0f,
			-1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, -1.0f, 1.0f,
			-1.0f, -1.0f, 1.0f,
			-1.0f, 1.0f, -1.0f,
			1.0f, 1.0f, -1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			-1.0f, 1.0f, 1.0f,
			-1.0f, 1.0f, -1.0f,
			-1.0f, -1.0f, -1.0f,
			-1.0f, -1.0f, 1.0f,
			1.0f, -1.0f, -1.0f,
			1.0f, -1.0f, -1.0f,
			-1.0f, -1.0f, 1.0f,
			1.0f, -1.0f, 1.0f};

		//Vertex shader SPIR-V code (and yes, the name joke is intentional)
		//Generated by glslc at build-time
		static constexpr uint32_t vsCode[] =
#include "skybox.vert.txt"
			;

		//Fragment shader SPIR-V code
		//Generated by glslc at build-time
		static constexpr uint32_t fsCode[] =
#include "skybox.frag.txt"
			;

		static bool isSetup;

		//Backend-implemented data type
		struct SkyboxData;

		std::shared_ptr<SkyboxData> nativeData;
	};
}